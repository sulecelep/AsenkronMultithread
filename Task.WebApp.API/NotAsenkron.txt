--ContinueWith()

-Task metodundan sonra ContinueWith kullanırsak Task'in içerisindeki 
işlem tamamlandıktan sonra çalışacak kodlarımızı ekleyebiliriz.


--WhenAll()

WhenAll(task1,task2,task3...)
bütün tasklerin sonuçlanmasını bekler ondan sona çıkan sonucu bize geri döner.

--WhenAny()

WhenAny(task1,task2,task3...)
tasklerden ilk biteni döner

--WaitAll()
WaitAll(task1,task2,task3...)
bütün tasklerin tamamlanmasını beklerken kullanıcının ui'da etkileşimini kapatır blocklar

--WaitAny()
WaitAny(task1,task2,task3...)
İçlerinden herhangi bir taskin tamamlanmasını beklerken kullanıcının ui'da etkileşimini kapatır blocklar
Geriye taskin indexini döner.

--Delay() 
Asenkron şekilde gecikme sağlar. Bunu yaparken bloklamaz. Sleep metodundan farkı bloklamaması ve asenkron olması.


--Run() 
Run metodu ayrı bir thread üzerinde çalıştırır.
CPU'yu yoracak işlemleri ayrı bir threadte çalıştırmak uygundur.

--StartNew()
Bu metodun içinde yazmış olduğumuz kodları ayrı bir threadte çalıştırıyor.
Run'dan farklı olarak parametre olarak object alıp geriye bir object dönebiliyor.

--FromResult()
Bu metot parametre olarak bir object almakta, almış olduğu bu object değerini geriye bir Task nesnesiyle beraber dönmektedir.
genellikle bu metot cachelenmiş parametreyi dönmek amacıyla kullanılır.

--CancellationToken - 1 
Asenkron işlem bazen çok uzun sürebilir, biz bazen bu işlemi iptal etmek isteriz.
Asenkron işlem başlatırken buna bir token veriyoruz sonra iptal ettiğimiz zaman bu asenkron metot iptal oluyor.